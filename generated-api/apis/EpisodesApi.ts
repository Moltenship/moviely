/* tslint:disable */
/* eslint-disable */
/**
 * TVDB API V4
 * Documentation of [TheTVDB](https://thetvdb.com/) API V4. All related information is linked from our [Github repo](https://github.com/thetvdb/v4-api). You might also want to use our [Postman collection] (https://www.getpostman.com/collections/7a9397ce69ff246f74d0) ## Authentication 1. Use the /login endpoint and provide your API key as \"apikey\". If you have a user-supported key, also provide your subscriber PIN as \"pin\". Otherwise completely remove \"pin\" from your call. 2. Executing this call will provide you with a bearer token, which is valid for 1 month. 3. Provide your bearer token for subsequent API calls by clicking Authorize below or including in the header of all direct API calls: `Authorization: Bearer [your-token]`  ## Notes 1. \"score\" is a field across almost all entities.  We generate scores for different types of entities in various ways, so no assumptions should be made about the meaning of this value.  It is simply used to hint at relative popularity for sorting purposes. 
 *
 * The version of the OpenAPI document: 4.7.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAllEpisodes200Response,
  GetEpisodeBase200Response,
  GetEpisodeExtended200Response,
  GetEpisodeTranslation200Response,
} from '../models/index';
import {
    GetAllEpisodes200ResponseFromJSON,
    GetAllEpisodes200ResponseToJSON,
    GetEpisodeBase200ResponseFromJSON,
    GetEpisodeBase200ResponseToJSON,
    GetEpisodeExtended200ResponseFromJSON,
    GetEpisodeExtended200ResponseToJSON,
    GetEpisodeTranslation200ResponseFromJSON,
    GetEpisodeTranslation200ResponseToJSON,
} from '../models/index';

export interface GetAllEpisodesRequest {
    page?: number;
}

export interface GetEpisodeBaseRequest {
    id: number;
}

export interface GetEpisodeExtendedRequest {
    id: number;
    meta?: GetEpisodeExtendedMetaEnum;
}

export interface GetEpisodeTranslationRequest {
    id: number;
    language: string;
}

/**
 * 
 */
export class EpisodesApi extends runtime.BaseAPI {

    /**
     * Returns a list of episodes base records with the basic attributes.<br> Note that all episodes are returned, even those that may not be included in a series\' default season order.
     */
    async getAllEpisodesRaw(requestParameters: GetAllEpisodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllEpisodes200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/episodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllEpisodes200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of episodes base records with the basic attributes.<br> Note that all episodes are returned, even those that may not be included in a series\' default season order.
     */
    async getAllEpisodes(requestParameters: GetAllEpisodesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllEpisodes200Response> {
        const response = await this.getAllEpisodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns episode base record
     */
    async getEpisodeBaseRaw(requestParameters: GetEpisodeBaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEpisodeBase200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getEpisodeBase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/episodes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEpisodeBase200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns episode base record
     */
    async getEpisodeBase(requestParameters: GetEpisodeBaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEpisodeBase200Response> {
        const response = await this.getEpisodeBaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns episode extended record
     */
    async getEpisodeExtendedRaw(requestParameters: GetEpisodeExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEpisodeExtended200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getEpisodeExtended().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['meta'] != null) {
            queryParameters['meta'] = requestParameters['meta'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/episodes/{id}/extended`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEpisodeExtended200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns episode extended record
     */
    async getEpisodeExtended(requestParameters: GetEpisodeExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEpisodeExtended200Response> {
        const response = await this.getEpisodeExtendedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns episode translation record
     */
    async getEpisodeTranslationRaw(requestParameters: GetEpisodeTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEpisodeTranslation200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getEpisodeTranslation().'
            );
        }

        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling getEpisodeTranslation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/episodes/{id}/translations/{language}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"language"}}`, encodeURIComponent(String(requestParameters['language']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEpisodeTranslation200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns episode translation record
     */
    async getEpisodeTranslation(requestParameters: GetEpisodeTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEpisodeTranslation200Response> {
        const response = await this.getEpisodeTranslationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetEpisodeExtendedMetaEnum = {
    Translations: 'translations'
} as const;
export type GetEpisodeExtendedMetaEnum = typeof GetEpisodeExtendedMetaEnum[keyof typeof GetEpisodeExtendedMetaEnum];
