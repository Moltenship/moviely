/* tslint:disable */
/* eslint-disable */
/**
 * TVDB API V4
 * Documentation of [TheTVDB](https://thetvdb.com/) API V4. All related information is linked from our [Github repo](https://github.com/thetvdb/v4-api). You might also want to use our [Postman collection] (https://www.getpostman.com/collections/7a9397ce69ff246f74d0) ## Authentication 1. Use the /login endpoint and provide your API key as \"apikey\". If you have a user-supported key, also provide your subscriber PIN as \"pin\". Otherwise completely remove \"pin\" from your call. 2. Executing this call will provide you with a bearer token, which is valid for 1 month. 3. Provide your bearer token for subsequent API calls by clicking Authorize below or including in the header of all direct API calls: `Authorization: Bearer [your-token]`  ## Notes 1. \"score\" is a field across almost all entities.  We generate scores for different types of entities in various ways, so no assumptions should be made about the meaning of this value.  It is simply used to hint at relative popularity for sorting purposes. 
 *
 * The version of the OpenAPI document: 4.7.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAllSeries200Response,
  GetEpisodeTranslation200Response,
  GetSeriesArtworks200Response,
  GetSeriesBase200Response,
  GetSeriesEpisodes200Response,
  GetSeriesFilter200Response,
  GetSeriesSeasonEpisodesTranslated200Response,
} from '../models/index';
import {
    GetAllSeries200ResponseFromJSON,
    GetAllSeries200ResponseToJSON,
    GetEpisodeTranslation200ResponseFromJSON,
    GetEpisodeTranslation200ResponseToJSON,
    GetSeriesArtworks200ResponseFromJSON,
    GetSeriesArtworks200ResponseToJSON,
    GetSeriesBase200ResponseFromJSON,
    GetSeriesBase200ResponseToJSON,
    GetSeriesEpisodes200ResponseFromJSON,
    GetSeriesEpisodes200ResponseToJSON,
    GetSeriesFilter200ResponseFromJSON,
    GetSeriesFilter200ResponseToJSON,
    GetSeriesSeasonEpisodesTranslated200ResponseFromJSON,
    GetSeriesSeasonEpisodesTranslated200ResponseToJSON,
} from '../models/index';

export interface GetAllSeriesRequest {
    page?: number;
}

export interface GetSeriesArtworksRequest {
    id: number;
    lang?: string;
    type?: number;
}

export interface GetSeriesBaseRequest {
    id: number;
}

export interface GetSeriesBaseBySlugRequest {
    slug: string;
}

export interface GetSeriesEpisodesRequest {
    page: number;
    id: number;
    seasonType: string;
    season?: number;
    episodeNumber?: number;
    airDate?: string;
}

export interface GetSeriesExtendedRequest {
    id: number;
    meta?: GetSeriesExtendedMetaEnum;
    _short?: boolean;
}

export interface GetSeriesFilterRequest {
    country: string;
    lang: string;
    company?: number;
    contentRating?: number;
    genre?: GetSeriesFilterGenreEnum;
    sort?: GetSeriesFilterSortEnum;
    sortType?: GetSeriesFilterSortTypeEnum;
    status?: GetSeriesFilterStatusEnum;
    year?: number;
}

export interface GetSeriesNextAiredRequest {
    id: number;
}

export interface GetSeriesSeasonEpisodesTranslatedRequest {
    page: number;
    id: number;
    seasonType: string;
    lang: string;
}

export interface GetSeriesTranslationRequest {
    id: number;
    language: string;
}

/**
 * 
 */
export class SeriesApi extends runtime.BaseAPI {

    /**
     * returns list of series base records
     */
    async getAllSeriesRaw(requestParameters: GetAllSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllSeries200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/series`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllSeries200ResponseFromJSON(jsonValue));
    }

    /**
     * returns list of series base records
     */
    async getAllSeries(requestParameters: GetAllSeriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllSeries200Response> {
        const response = await this.getAllSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns series artworks base on language and type. <br> Note&#58; Artwork type is an id that can be found using **_/artwork/types** endpoint.
     */
    async getSeriesArtworksRaw(requestParameters: GetSeriesArtworksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSeriesArtworks200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSeriesArtworks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/series/{id}/artworks`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSeriesArtworks200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns series artworks base on language and type. <br> Note&#58; Artwork type is an id that can be found using **_/artwork/types** endpoint.
     */
    async getSeriesArtworks(requestParameters: GetSeriesArtworksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSeriesArtworks200Response> {
        const response = await this.getSeriesArtworksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns series base record
     */
    async getSeriesBaseRaw(requestParameters: GetSeriesBaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSeriesBase200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSeriesBase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/series/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSeriesBase200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns series base record
     */
    async getSeriesBase(requestParameters: GetSeriesBaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSeriesBase200Response> {
        const response = await this.getSeriesBaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns series base record searched by slug
     */
    async getSeriesBaseBySlugRaw(requestParameters: GetSeriesBaseBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSeriesBase200Response>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getSeriesBaseBySlug().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/series/slug/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSeriesBase200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns series base record searched by slug
     */
    async getSeriesBaseBySlug(requestParameters: GetSeriesBaseBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSeriesBase200Response> {
        const response = await this.getSeriesBaseBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns series episodes from the specified season type, default returns the episodes in the series default season type
     */
    async getSeriesEpisodesRaw(requestParameters: GetSeriesEpisodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSeriesEpisodes200Response>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling getSeriesEpisodes().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSeriesEpisodes().'
            );
        }

        if (requestParameters['seasonType'] == null) {
            throw new runtime.RequiredError(
                'seasonType',
                'Required parameter "seasonType" was null or undefined when calling getSeriesEpisodes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['season'] != null) {
            queryParameters['season'] = requestParameters['season'];
        }

        if (requestParameters['episodeNumber'] != null) {
            queryParameters['episodeNumber'] = requestParameters['episodeNumber'];
        }

        if (requestParameters['airDate'] != null) {
            queryParameters['airDate'] = requestParameters['airDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/series/{id}/episodes/{season-type}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"season-type"}}`, encodeURIComponent(String(requestParameters['seasonType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSeriesEpisodes200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns series episodes from the specified season type, default returns the episodes in the series default season type
     */
    async getSeriesEpisodes(requestParameters: GetSeriesEpisodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSeriesEpisodes200Response> {
        const response = await this.getSeriesEpisodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns series extended record
     */
    async getSeriesExtendedRaw(requestParameters: GetSeriesExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSeriesArtworks200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSeriesExtended().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['meta'] != null) {
            queryParameters['meta'] = requestParameters['meta'];
        }

        if (requestParameters['_short'] != null) {
            queryParameters['short'] = requestParameters['_short'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/series/{id}/extended`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSeriesArtworks200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns series extended record
     */
    async getSeriesExtended(requestParameters: GetSeriesExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSeriesArtworks200Response> {
        const response = await this.getSeriesExtendedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search series based on filter parameters
     */
    async getSeriesFilterRaw(requestParameters: GetSeriesFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSeriesFilter200Response>> {
        if (requestParameters['country'] == null) {
            throw new runtime.RequiredError(
                'country',
                'Required parameter "country" was null or undefined when calling getSeriesFilter().'
            );
        }

        if (requestParameters['lang'] == null) {
            throw new runtime.RequiredError(
                'lang',
                'Required parameter "lang" was null or undefined when calling getSeriesFilter().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['company'] != null) {
            queryParameters['company'] = requestParameters['company'];
        }

        if (requestParameters['contentRating'] != null) {
            queryParameters['contentRating'] = requestParameters['contentRating'];
        }

        if (requestParameters['country'] != null) {
            queryParameters['country'] = requestParameters['country'];
        }

        if (requestParameters['genre'] != null) {
            queryParameters['genre'] = requestParameters['genre'];
        }

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['sortType'] != null) {
            queryParameters['sortType'] = requestParameters['sortType'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/series/filter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSeriesFilter200ResponseFromJSON(jsonValue));
    }

    /**
     * Search series based on filter parameters
     */
    async getSeriesFilter(requestParameters: GetSeriesFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSeriesFilter200Response> {
        const response = await this.getSeriesFilterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns series base record including the nextAired field. <br> Note&#58; nextAired was included in the base record endpoint but that field will deprecated in the future so developers should use the nextAired endpoint.
     */
    async getSeriesNextAiredRaw(requestParameters: GetSeriesNextAiredRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSeriesBase200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSeriesNextAired().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/series/{id}/nextAired`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSeriesBase200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns series base record including the nextAired field. <br> Note&#58; nextAired was included in the base record endpoint but that field will deprecated in the future so developers should use the nextAired endpoint.
     */
    async getSeriesNextAired(requestParameters: GetSeriesNextAiredRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSeriesBase200Response> {
        const response = await this.getSeriesNextAiredRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns series base record with episodes from the specified season type and language. Default returns the episodes in the series default season type.
     */
    async getSeriesSeasonEpisodesTranslatedRaw(requestParameters: GetSeriesSeasonEpisodesTranslatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSeriesSeasonEpisodesTranslated200Response>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling getSeriesSeasonEpisodesTranslated().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSeriesSeasonEpisodesTranslated().'
            );
        }

        if (requestParameters['seasonType'] == null) {
            throw new runtime.RequiredError(
                'seasonType',
                'Required parameter "seasonType" was null or undefined when calling getSeriesSeasonEpisodesTranslated().'
            );
        }

        if (requestParameters['lang'] == null) {
            throw new runtime.RequiredError(
                'lang',
                'Required parameter "lang" was null or undefined when calling getSeriesSeasonEpisodesTranslated().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/series/{id}/episodes/{season-type}/{lang}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"season-type"}}`, encodeURIComponent(String(requestParameters['seasonType']))).replace(`{${"lang"}}`, encodeURIComponent(String(requestParameters['lang']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSeriesSeasonEpisodesTranslated200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns series base record with episodes from the specified season type and language. Default returns the episodes in the series default season type.
     */
    async getSeriesSeasonEpisodesTranslated(requestParameters: GetSeriesSeasonEpisodesTranslatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSeriesSeasonEpisodesTranslated200Response> {
        const response = await this.getSeriesSeasonEpisodesTranslatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns series translation record
     */
    async getSeriesTranslationRaw(requestParameters: GetSeriesTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEpisodeTranslation200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSeriesTranslation().'
            );
        }

        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling getSeriesTranslation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/series/{id}/translations/{language}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"language"}}`, encodeURIComponent(String(requestParameters['language']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEpisodeTranslation200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns series translation record
     */
    async getSeriesTranslation(requestParameters: GetSeriesTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEpisodeTranslation200Response> {
        const response = await this.getSeriesTranslationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetSeriesExtendedMetaEnum = {
    Translations: 'translations',
    Episodes: 'episodes'
} as const;
export type GetSeriesExtendedMetaEnum = typeof GetSeriesExtendedMetaEnum[keyof typeof GetSeriesExtendedMetaEnum];
/**
 * @export
 */
export const GetSeriesFilterGenreEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_15: 15,
    NUMBER_16: 16,
    NUMBER_17: 17,
    NUMBER_18: 18,
    NUMBER_19: 19,
    NUMBER_21: 21,
    NUMBER_22: 22,
    NUMBER_23: 23,
    NUMBER_24: 24,
    NUMBER_25: 25,
    NUMBER_26: 26,
    NUMBER_27: 27,
    NUMBER_28: 28,
    NUMBER_29: 29,
    NUMBER_30: 30,
    NUMBER_31: 31,
    NUMBER_32: 32,
    NUMBER_33: 33,
    NUMBER_34: 34,
    NUMBER_35: 35,
    NUMBER_36: 36
} as const;
export type GetSeriesFilterGenreEnum = typeof GetSeriesFilterGenreEnum[keyof typeof GetSeriesFilterGenreEnum];
/**
 * @export
 */
export const GetSeriesFilterSortEnum = {
    Score: 'score',
    FirstAired: 'firstAired',
    LastAired: 'lastAired',
    Name: 'name'
} as const;
export type GetSeriesFilterSortEnum = typeof GetSeriesFilterSortEnum[keyof typeof GetSeriesFilterSortEnum];
/**
 * @export
 */
export const GetSeriesFilterSortTypeEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetSeriesFilterSortTypeEnum = typeof GetSeriesFilterSortTypeEnum[keyof typeof GetSeriesFilterSortTypeEnum];
/**
 * @export
 */
export const GetSeriesFilterStatusEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;
export type GetSeriesFilterStatusEnum = typeof GetSeriesFilterStatusEnum[keyof typeof GetSeriesFilterStatusEnum];
