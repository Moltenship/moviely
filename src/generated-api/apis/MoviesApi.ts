/* tslint:disable */
/* eslint-disable */
/**
 * TVDB API V4
 * Documentation of [TheTVDB](https://thetvdb.com/) API V4. All related information is linked from our [Github repo](https://github.com/thetvdb/v4-api). You might also want to use our [Postman collection] (https://www.getpostman.com/collections/7a9397ce69ff246f74d0) ## Authentication 1. Use the /login endpoint and provide your API key as \"apikey\". If you have a user-supported key, also provide your subscriber PIN as \"pin\". Otherwise completely remove \"pin\" from your call. 2. Executing this call will provide you with a bearer token, which is valid for 1 month. 3. Provide your bearer token for subsequent API calls by clicking Authorize below or including in the header of all direct API calls: `Authorization: Bearer [your-token]`  ## Notes 1. \"score\" is a field across almost all entities.  We generate scores for different types of entities in various ways, so no assumptions should be made about the meaning of this value.  It is simply used to hint at relative popularity for sorting purposes. 
 *
 * The version of the OpenAPI document: 4.7.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAllMovie200Response,
  GetEpisodeTranslation200Response,
  GetMovieBase200Response,
  GetMovieExtended200Response,
  GetMoviesFilter200Response,
} from '../models/index';
import {
    GetAllMovie200ResponseFromJSON,
    GetAllMovie200ResponseToJSON,
    GetEpisodeTranslation200ResponseFromJSON,
    GetEpisodeTranslation200ResponseToJSON,
    GetMovieBase200ResponseFromJSON,
    GetMovieBase200ResponseToJSON,
    GetMovieExtended200ResponseFromJSON,
    GetMovieExtended200ResponseToJSON,
    GetMoviesFilter200ResponseFromJSON,
    GetMoviesFilter200ResponseToJSON,
} from '../models/index';

export interface GetAllMovieRequest {
    page?: number;
}

export interface GetMovieBaseRequest {
    id: number;
}

export interface GetMovieBaseBySlugRequest {
    slug: string;
}

export interface GetMovieExtendedRequest {
    id: number;
    meta?: GetMovieExtendedMetaEnum;
    _short?: boolean;
}

export interface GetMovieTranslationRequest {
    id: number;
    language: string;
}

export interface GetMoviesFilterRequest {
    country: string;
    lang: string;
    company?: number;
    contentRating?: number;
    genre?: GetMoviesFilterGenreEnum;
    sort?: GetMoviesFilterSortEnum;
    status?: GetMoviesFilterStatusEnum;
    year?: number;
}

/**
 * 
 */
export class MoviesApi extends runtime.BaseAPI {

    /**
     * returns list of movie base records
     */
    async getAllMovieRaw(requestParameters: GetAllMovieRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllMovie200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/movies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllMovie200ResponseFromJSON(jsonValue));
    }

    /**
     * returns list of movie base records
     */
    async getAllMovie(requestParameters: GetAllMovieRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllMovie200Response> {
        const response = await this.getAllMovieRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns movie base record
     */
    async getMovieBaseRaw(requestParameters: GetMovieBaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMovieBase200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMovieBase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/movies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMovieBase200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns movie base record
     */
    async getMovieBase(requestParameters: GetMovieBaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMovieBase200Response> {
        const response = await this.getMovieBaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns movie base record search by slug
     */
    async getMovieBaseBySlugRaw(requestParameters: GetMovieBaseBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMovieBase200Response>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getMovieBaseBySlug().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/movies/slug/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMovieBase200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns movie base record search by slug
     */
    async getMovieBaseBySlug(requestParameters: GetMovieBaseBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMovieBase200Response> {
        const response = await this.getMovieBaseBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns movie extended record
     */
    async getMovieExtendedRaw(requestParameters: GetMovieExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMovieExtended200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMovieExtended().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['meta'] != null) {
            queryParameters['meta'] = requestParameters['meta'];
        }

        if (requestParameters['_short'] != null) {
            queryParameters['short'] = requestParameters['_short'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/movies/{id}/extended`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMovieExtended200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns movie extended record
     */
    async getMovieExtended(requestParameters: GetMovieExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMovieExtended200Response> {
        const response = await this.getMovieExtendedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns movie translation record
     */
    async getMovieTranslationRaw(requestParameters: GetMovieTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEpisodeTranslation200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMovieTranslation().'
            );
        }

        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling getMovieTranslation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/movies/{id}/translations/{language}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"language"}}`, encodeURIComponent(String(requestParameters['language']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEpisodeTranslation200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns movie translation record
     */
    async getMovieTranslation(requestParameters: GetMovieTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEpisodeTranslation200Response> {
        const response = await this.getMovieTranslationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search movies based on filter parameters
     */
    async getMoviesFilterRaw(requestParameters: GetMoviesFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMoviesFilter200Response>> {
        if (requestParameters['country'] == null) {
            throw new runtime.RequiredError(
                'country',
                'Required parameter "country" was null or undefined when calling getMoviesFilter().'
            );
        }

        if (requestParameters['lang'] == null) {
            throw new runtime.RequiredError(
                'lang',
                'Required parameter "lang" was null or undefined when calling getMoviesFilter().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['company'] != null) {
            queryParameters['company'] = requestParameters['company'];
        }

        if (requestParameters['contentRating'] != null) {
            queryParameters['contentRating'] = requestParameters['contentRating'];
        }

        if (requestParameters['country'] != null) {
            queryParameters['country'] = requestParameters['country'];
        }

        if (requestParameters['genre'] != null) {
            queryParameters['genre'] = requestParameters['genre'];
        }

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/movies/filter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMoviesFilter200ResponseFromJSON(jsonValue));
    }

    /**
     * Search movies based on filter parameters
     */
    async getMoviesFilter(requestParameters: GetMoviesFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMoviesFilter200Response> {
        const response = await this.getMoviesFilterRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetMovieExtendedMetaEnum = {
    Translations: 'translations'
} as const;
export type GetMovieExtendedMetaEnum = typeof GetMovieExtendedMetaEnum[keyof typeof GetMovieExtendedMetaEnum];
/**
 * @export
 */
export const GetMoviesFilterGenreEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_15: 15,
    NUMBER_16: 16,
    NUMBER_17: 17,
    NUMBER_18: 18,
    NUMBER_19: 19,
    NUMBER_21: 21,
    NUMBER_22: 22,
    NUMBER_23: 23,
    NUMBER_24: 24,
    NUMBER_25: 25,
    NUMBER_26: 26,
    NUMBER_27: 27,
    NUMBER_28: 28,
    NUMBER_29: 29,
    NUMBER_30: 30,
    NUMBER_31: 31,
    NUMBER_32: 32,
    NUMBER_33: 33,
    NUMBER_34: 34,
    NUMBER_35: 35,
    NUMBER_36: 36
} as const;
export type GetMoviesFilterGenreEnum = typeof GetMoviesFilterGenreEnum[keyof typeof GetMoviesFilterGenreEnum];
/**
 * @export
 */
export const GetMoviesFilterSortEnum = {
    Score: 'score',
    FirstAired: 'firstAired',
    Name: 'name'
} as const;
export type GetMoviesFilterSortEnum = typeof GetMoviesFilterSortEnum[keyof typeof GetMoviesFilterSortEnum];
/**
 * @export
 */
export const GetMoviesFilterStatusEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;
export type GetMoviesFilterStatusEnum = typeof GetMoviesFilterStatusEnum[keyof typeof GetMoviesFilterStatusEnum];
