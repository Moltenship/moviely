/* tslint:disable */
/* eslint-disable */
/**
 * TVDB API V4
 * Documentation of [TheTVDB](https://thetvdb.com/) API V4. All related information is linked from our [Github repo](https://github.com/thetvdb/v4-api). You might also want to use our [Postman collection] (https://www.getpostman.com/collections/7a9397ce69ff246f74d0) ## Authentication 1. Use the /login endpoint and provide your API key as \"apikey\". If you have a user-supported key, also provide your subscriber PIN as \"pin\". Otherwise completely remove \"pin\" from your call. 2. Executing this call will provide you with a bearer token, which is valid for 1 month. 3. Provide your bearer token for subsequent API calls by clicking Authorize below or including in the header of all direct API calls: `Authorization: Bearer [your-token]`  ## Notes 1. \"score\" is a field across almost all entities.  We generate scores for different types of entities in various ways, so no assumptions should be made about the meaning of this value.  It is simply used to hint at relative popularity for sorting purposes. 
 *
 * The version of the OpenAPI document: 4.7.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAllLists200Response,
  GetList200Response,
  GetListExtended200Response,
  GetListTranslation200Response,
} from '../models/index';
import {
    GetAllLists200ResponseFromJSON,
    GetAllLists200ResponseToJSON,
    GetList200ResponseFromJSON,
    GetList200ResponseToJSON,
    GetListExtended200ResponseFromJSON,
    GetListExtended200ResponseToJSON,
    GetListTranslation200ResponseFromJSON,
    GetListTranslation200ResponseToJSON,
} from '../models/index';

export interface GetAllListsRequest {
    page?: number;
}

export interface GetListRequest {
    id: number;
}

export interface GetListBySlugRequest {
    slug: string;
}

export interface GetListExtendedRequest {
    id: number;
}

export interface GetListTranslationRequest {
    id: number;
    language: string;
}

/**
 * 
 */
export class ListsApi extends runtime.BaseAPI {

    /**
     * returns list of list base records
     */
    async getAllListsRaw(requestParameters: GetAllListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllLists200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllLists200ResponseFromJSON(jsonValue));
    }

    /**
     * returns list of list base records
     */
    async getAllLists(requestParameters: GetAllListsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllLists200Response> {
        const response = await this.getAllListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * returns an list base record
     */
    async getListRaw(requestParameters: GetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetList200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetList200ResponseFromJSON(jsonValue));
    }

    /**
     * returns an list base record
     */
    async getList(requestParameters: GetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetList200Response> {
        const response = await this.getListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * returns an list base record search by slug
     */
    async getListBySlugRaw(requestParameters: GetListBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetList200Response>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getListBySlug().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/slug/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetList200ResponseFromJSON(jsonValue));
    }

    /**
     * returns an list base record search by slug
     */
    async getListBySlug(requestParameters: GetListBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetList200Response> {
        const response = await this.getListBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * returns a list extended record
     */
    async getListExtendedRaw(requestParameters: GetListExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetListExtended200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getListExtended().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{id}/extended`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListExtended200ResponseFromJSON(jsonValue));
    }

    /**
     * returns a list extended record
     */
    async getListExtended(requestParameters: GetListExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetListExtended200Response> {
        const response = await this.getListExtendedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list translation record
     */
    async getListTranslationRaw(requestParameters: GetListTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetListTranslation200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getListTranslation().'
            );
        }

        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling getListTranslation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lists/{id}/translations/{language}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"language"}}`, encodeURIComponent(String(requestParameters['language']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListTranslation200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns list translation record
     */
    async getListTranslation(requestParameters: GetListTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetListTranslation200Response> {
        const response = await this.getListTranslationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
